#define FT8_HSIZE	(800L)	/* Thd Length of visible part of line (in PCLKs) - display width */
#define FT8_VSIZE	(480L)	/* Tvd Number of visible lines (in lines) - display height */

#define FT8_VSYNC0	(0L)	/* Tvf Vertical Front Porch */
#define FT8_VSYNC1	(10L)	/* Tvf + Tvp Vertical Front Porch plus Vsync Pulse width */
#define FT8_VOFFSET	(23L)	/* Tvf + Tvp + Tvb Number of non-visible lines (in lines) */
#define FT8_VCYCLE	(525L)	/* Tv Total number of lines (visible and non-visible) (in lines) */
#define FT8_HSYNC0	(0L)	/* Thf Horizontal Front Porch */
#define FT8_HSYNC1	(10L)	/* Thf + Thp Horizontal Front Porch plus Hsync Pulse width */
#define FT8_HOFFSET (46L)	/* Thf + Thp + Thb Length of non-visible part of line (in PCLK cycles) */
#define FT8_HCYCLE 	(1056L)	/* Th Total length of line (visible and non-visible) (in PCLKs) */
#define FT8_PCLKPOL (1L)	/* PCLK polarity (0 = rising edge, 1 = falling edge) */
#define FT8_SWIZZLE (0L)	/* Defines the arrangement of the RGB pins of the FT800 */
#define FT8_PCLK	(2L)	/* clock divider for pclk */
#define FT8_CSPREAD	(1L)	/* helps with noise, when set to 1 fewer signals are changed simultaneously, reset-default: 1 */
#define FT8_TOUCH_RZTHRESH (1800L)	/* touch-sensitivity 1200~FFFF */
#define FT8_81X_ENABLE
////////////////.
/* FT8xx graphics engine specific macros useful for static display list generation */
#define ALPHA_FUNC(func,ref) ((9UL<<24)|(((func)&7UL)<<8)|(((ref)&255UL)<<0))
#define BEGIN(prim) ((31UL<<24)|(((prim)&15UL)<<0))
#define BITMAP_HANDLE(handle) ((5UL<<24)|(((handle)&31UL)<<0))
#define BITMAP_LAYOUT(format,linestride,height) ((7UL<<24)|(((format)&31UL)<<19)|(((linestride)&1023UL)<<9)|(((height)&511UL)<<0))
#define BITMAP_SIZE(filter,wrapx,wrapy,width,height) ((8UL<<24)|(((filter)&1UL)<<20)|(((wrapx)&1UL)<<19)|(((wrapy)&1UL)<<18)|(((width)&511UL)<<9)|(((height)&511UL)<<0))

#define BITMAP_TRANSFORM_A(a) ((21UL<<24)|(((a)&131071UL)<<0))

#define BITMAP_TRANSFORM_B(b) ((22UL<<24)|(((b)&131071UL)<<0))
#define BITMAP_TRANSFORM_C(c) ((23UL<<24)|(((c)&16777215UL)<<0))
#define BITMAP_TRANSFORM_D(d) ((24UL<<24)|(((d)&131071UL)<<0))
#define BITMAP_TRANSFORM_E(e) ((25UL<<24)|(((e)&131071UL)<<0))
#define BITMAP_TRANSFORM_F(f) ((26UL<<24)|(((f)&16777215UL)<<0))
#define BLEND_FUNC(src,dst) ((11UL<<24)|(((src)&7UL)<<3)|(((dst)&7UL)<<0))
#define CALL(dest) ((29UL<<24)|(((dest)&65535UL)<<0))
#define CELL(cell) ((6UL<<24)|(((cell)&127UL)<<0))
#define CLEAR(c,s,t) ((38UL<<24)|(((c)&1UL)<<2)|(((s)&1UL)<<1)|(((t)&1UL)<<0))
#define CLEAR_COLOR_A(alpha) ((15UL<<24)|(((alpha)&255UL)<<0))
#define CLEAR_COLOR_RGB(red,green,blue) ((2UL<<24)|(((red)&255UL)<<16)|(((green)&255UL)<<8)|(((blue)&255UL)<<0))
#define CLEAR_STENCIL(s) ((17UL<<24)|(((s)&255UL)<<0))
#define CLEAR_TAG(s) ((18UL<<24)|(((s)&255UL)<<0))
#define COLOR_A(alpha) ((16UL<<24)|(((alpha)&255UL)<<0))
#define COLOR_MASK(r,g,b,a) ((32UL<<24)|(((r)&1UL)<<3)|(((g)&1UL)<<2)|(((b)&1UL)<<1)|(((a)&1UL)<<0))
#define COLOR_RGB(red,green,blue) ((4UL<<24)|(((red)&255UL)<<16)|(((green)&255UL)<<8)|(((blue)&255UL)<<0))
/* #define DISPLAY() ((0UL<<24)) */
#define END() ((33UL<<24))
#define JUMP(dest) ((30UL<<24)|(((dest)&65535UL)<<0))
#define LINE_WIDTH(width) ((14UL<<24)|(((width)&4095UL)<<0))
#define MACRO(m) ((37UL<<24)|(((m)&1UL)<<0))
#define POINT_SIZE(size) ((13UL<<24)|(((size)&8191UL)<<0))
#define RESTORE_CONTEXT() ((35UL<<24))
#define RETURN() ((36UL<<24))
#define SAVE_CONTEXT() ((34UL<<24))
#define STENCIL_FUNC(func,ref,mask) ((10UL<<24)|(((func)&7UL)<<16)|(((ref)&255UL)<<8)|(((mask)&255UL)<<0))
#define STENCIL_MASK(mask) ((19UL<<24)|(((mask)&255UL)<<0))
#define STENCIL_OP(sfail,spass) ((12UL<<24)|(((sfail)&7UL)<<3)|(((spass)&7UL)<<0))
#define TAG(s) ((3UL<<24)|(((s)&255UL)<<0))
#define TAG_MASK(mask) ((20UL<<24)|(((mask)&1UL)<<0))
#define VERTEX2F(x,y) ((1UL<<30)|(((x)&32767UL)<<15)|(((y)&32767UL)<<0))
#define VERTEX2II(x,y,handle,cell) ((2UL<<30)|(((x)&511UL)<<21)|(((y)&511UL)<<12)|(((handle)&31UL)<<7)|(((cell)&127UL)<<0))
////////////////////
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
}
/*
void spi_ft8_set(ft8_instance , ft8_value ) 
{
spi_set+peripheral_chip_select_value(ft8_instance* , ft8_value)
} 
*/
/* Host commands */
#define FT8_ACTIVE	0x00  /* place FT8xx in active state */
#define FT8_STANDBY	0x41  /* place FT8xx in Standby (clk running) */
#define FT8_SLEEP	0x42  /* place FT8xx in Sleep (clk off) */
#define FT8_PWRDOWN	0x50  /* place FT8xx in Power Down (core off) */
#define FT8_CLKEXT	0x44  /* select external clock source */
#define FT8_CLKINT	0x48  /* select internal clock source */
#define FT8_CORERST	0x68  /* reset core - all registers default and processors reset */
#define FT8_CLK48M	0x62  /* select 48MHz PLL output */
#define FT8_CLK36M	0x61  /* select 36MHz PLL output */
////////////////
/* Coprocessor related commands */
#define CMD_APPEND				0xFFFFFF1EUL
#define CMD_BGCOLOR				0xFFFFFF09UL
#define CMD_BUTTON				0xFFFFFF0DUL
#define CMD_CALIBRATE			0xFFFFFF15UL
#define CMD_CLOCK				0xFFFFFF14UL
#define CMD_COLDSTART			0xFFFFFF32UL
#define CMD_DIAL				0xFFFFFF2DUL
#define CMD_DLSTART				0xFFFFFF00UL
#define CMD_FGCOLOR				0xFFFFFF0AUL
#define CMD_GAUGE				0xFFFFFF13UL
#define CMD_GETMATRIX			0xFFFFFF33UL
#define CMD_GETPROPS			0xFFFFFF25UL
#define CMD_GETPTR				0xFFFFFF23UL
#define CMD_GRADCOLOR			0xFFFFFF34UL
#define CMD_GRADIENT			0xFFFFFF0BUL
#define CMD_INFLATE				0xFFFFFF22UL
#define CMD_INTERRUPT			0xFFFFFF02UL
#define CMD_KEYS				0xFFFFFF0EUL
#define CMD_LOADIDENTITY		0xFFFFFF26UL
#define CMD_LOADIMAGE			0xFFFFFF24UL
#define CMD_LOGO				0xFFFFFF31UL
#define CMD_MEMCPY				0xFFFFFF1DUL
#define CMD_MEMCRC				0xFFFFFF18UL
#define CMD_MEMSET				0xFFFFFF1BUL
#define CMD_MEMWRITE			0xFFFFFF1AUL
#define CMD_MEMZERO				0xFFFFFF1CUL
#define CMD_NUMBER				0xFFFFFF2EUL
#define CMD_PROGRESS			0xFFFFFF0FUL
#define CMD_REGREAD				0xFFFFFF19UL
#define CMD_ROTATE				0xFFFFFF29UL
#define CMD_SCALE				0xFFFFFF28UL
#define CMD_SCREENSAVER			0xFFFFFF2FUL
#define CMD_SCROLLBAR			0xFFFFFF11UL
#define CMD_SETFONT				0xFFFFFF2BUL
#define CMD_SETMATRIX			0xFFFFFF2AUL
#define CMD_SKETCH				0xFFFFFF30UL
#define CMD_SLIDER				0xFFFFFF10UL
#define CMD_SNAPSHOT			0xFFFFFF1FUL
#define CMD_SPINNER				0xFFFFFF16UL
#define CMD_STOP				0xFFFFFF17UL
#define CMD_SWAP				0xFFFFFF01UL
#define CMD_TEXT				0xFFFFFF0CUL
#define CMD_TOGGLE				0xFFFFFF12UL
#define CMD_TRACK				0xFFFFFF2CUL
#define CMD_TRANSLATE			0xFFFFFF27UL
/////////////////////////

/* FT8xx graphics engine specific macros useful for static display list generation */
#define ALPHA_FUNC(func,ref) ((9UL<<24)|(((func)&7UL)<<8)|(((ref)&255UL)<<0))
#define BEGIN(prim) ((31UL<<24)|(((prim)&15UL)<<0))
#define BITMAP_HANDLE(handle) ((5UL<<24)|(((handle)&31UL)<<0))
#define BITMAP_LAYOUT(format,linestride,height) ((7UL<<24)|(((format)&31UL)<<19)|(((linestride)&1023UL)<<9)|(((height)&511UL)<<0))
#define BITMAP_SIZE(filter,wrapx,wrapy,width,height) ((8UL<<24)|(((filter)&1UL)<<20)|(((wrapx)&1UL)<<19)|(((wrapy)&1UL)<<18)|(((width)&511UL)<<9)|(((height)&511UL)<<0))
#define BITMAP_TRANSFORM_A(a) ((21UL<<24)|(((a)&131071UL)<<0))
#define BITMAP_TRANSFORM_B(b) ((22UL<<24)|(((b)&131071UL)<<0))
#define BITMAP_TRANSFORM_C(c) ((23UL<<24)|(((c)&16777215UL)<<0))
#define BITMAP_TRANSFORM_D(d) ((24UL<<24)|(((d)&131071UL)<<0))
#define BITMAP_TRANSFORM_E(e) ((25UL<<24)|(((e)&131071UL)<<0))
#define BITMAP_TRANSFORM_F(f) ((26UL<<24)|(((f)&16777215UL)<<0))
#define BLEND_FUNC(src,dst) ((11UL<<24)|(((src)&7UL)<<3)|(((dst)&7UL)<<0))
#define CALL(dest) ((29UL<<24)|(((dest)&65535UL)<<0))
#define CELL(cell) ((6UL<<24)|(((cell)&127UL)<<0))
#define CLEAR(c,s,t) ((38UL<<24)|(((c)&1UL)<<2)|(((s)&1UL)<<1)|(((t)&1UL)<<0))
#define CLEAR_COLOR_A(alpha) ((15UL<<24)|(((alpha)&255UL)<<0))
#define CLEAR_COLOR_RGB(red,green,blue) ((2UL<<24)|(((red)&255UL)<<16)|(((green)&255UL)<<8)|(((blue)&255UL)<<0))
#define CLEAR_STENCIL(s) ((17UL<<24)|(((s)&255UL)<<0))
#define CLEAR_TAG(s) ((18UL<<24)|(((s)&255UL)<<0))
#define COLOR_A(alpha) ((16UL<<24)|(((alpha)&255UL)<<0))
#define COLOR_MASK(r,g,b,a) ((32UL<<24)|(((r)&1UL)<<3)|(((g)&1UL)<<2)|(((b)&1UL)<<1)|(((a)&1UL)<<0))
#define COLOR_RGB(red,green,blue) ((4UL<<24)|(((red)&255UL)<<16)|(((green)&255UL)<<8)|(((blue)&255UL)<<0))
/* #define DISPLAY() ((0UL<<24)) */
#define END() ((33UL<<24))
#define JUMP(dest) ((30UL<<24)|(((dest)&65535UL)<<0))
#define LINE_WIDTH(width) ((14UL<<24)|(((width)&4095UL)<<0))
#define MACRO(m) ((37UL<<24)|(((m)&1UL)<<0))
#define POINT_SIZE(size) ((13UL<<24)|(((size)&8191UL)<<0))
#define RESTORE_CONTEXT() ((35UL<<24))
#define RETURN() ((36UL<<24))
#define SAVE_CONTEXT() ((34UL<<24))
#define STENCIL_FUNC(func,ref,mask) ((10UL<<24)|(((func)&7UL)<<16)|(((ref)&255UL)<<8)|(((mask)&255UL)<<0))
#define STENCIL_MASK(mask) ((19UL<<24)|(((mask)&255UL)<<0))
#define STENCIL_OP(sfail,spass) ((12UL<<24)|(((sfail)&7UL)<<3)|(((spass)&7UL)<<0))
#define TAG(s) ((3UL<<24)|(((s)&255UL)<<0))
#define TAG_MASK(mask) ((20UL<<24)|(((mask)&1UL)<<0))
#define VERTEX2F(x,y) ((1UL<<30)|(((x)&32767UL)<<15)|(((y)&32767UL)<<0))
#define VERTEX2II(x,y,handle,cell) ((2UL<<30)|(((x)&511UL)<<21)|(((y)&511UL)<<12)|(((handle)&31UL)<<7)|(((cell)&127UL)<<0))
///////////////////////
/* commands to draw graphics objects: */
void FT8_cmd_text(int16_t x0, int16_t y0, int16_t font, uint16_t options, const char* text);
void FT8_cmd_button(int16_t x0, int16_t y0, int16_t w0, int16_t h0, int16_t font, uint16_t options, const char* text);
void FT8_cmd_clock(int16_t x0, int16_t y0, int16_t r0, uint16_t options, uint16_t hours, uint16_t minutes, uint16_t seconds, uint16_t millisecs);
void FT8_cmd_bgcolor(uint32_t color);
void FT8_cmd_fgcolor(uint32_t color);
void FT8_cmd_gradcolor(uint32_t color);
void FT8_cmd_gauge(int16_t x0, int16_t y0, int16_t r0, uint16_t options, uint16_t major, uint16_t minor, uint16_t val, uint16_t range);
void FT8_cmd_gradient(int16_t x0, int16_t y0, uint32_t rgb0, int16_t x1, int16_t y1, uint32_t rgb1);
void FT8_cmd_keys(int16_t x0, int16_t y0, int16_t w0, int16_t h0, int16_t font, uint16_t options, const char* text);
void FT8_cmd_progress(int16_t x0, int16_t y0, int16_t w0, int16_t h0, uint16_t options, uint16_t val, uint16_t range);
void FT8_cmd_scrollbar(int16_t x0, int16_t y0, int16_t w0, int16_t h0, uint16_t options, uint16_t val, uint16_t size, uint16_t range);
void FT8_cmd_slider(int16_t x1, int16_t y1, int16_t w1, int16_t h1, uint16_t options, uint16_t val, uint16_t range);
void FT8_cmd_dial(int16_t x0, int16_t y0, int16_t r0, uint16_t options, uint16_t val);
void FT8_cmd_toggle(int16_t x0, int16_t y0, int16_t w0, int16_t font, uint16_t options, uint16_t state, const char* text);
void FT8_cmd_number(int16_t x0, int16_t y0, int16_t font, uint16_t options, int32_t number);

#ifdef FT8_81X_ENABLE
void FT8_cmd_setbase(uint32_t base);
void FT8_cmd_setbitmap(uint32_t addr, uint16_t fmt, uint16_t width, uint16_t height);
#endif

/* commands to operate on memory: */
void FT8_cmd_memzero(uint32_t ptr, uint32_t num);
void FT8_cmd_memset(uint32_t ptr, uint8_t value, uint32_t num);
/*(void FT8_cmd_memwrite(uint32_t dest, uint32_t num, const uint8_t *data); */
void FT8_cmd_memcpy(uint32_t dest, uint32_t src, uint32_t num);
void FT8_cmd_append(uint32_t ptr, uint32_t num);


/* commands for loading image data into FT8xx memory: */
void FT8_cmd_inflate(uint32_t ptr, const uint8_t *data, uint16_t len);
void FT8_cmd_loadimage(uint32_t ptr, uint32_t options, const uint8_t *data, uint16_t len);
#ifdef FT8_81X_ENABLE
void FT8_cmd_mediafifo(uint32_t ptr, uint32_t size);
#endif

/* commands for setting the bitmap transform matrix: */
void FT8_cmd_translate(int32_t tx, int32_t ty);
void FT8_cmd_scale(int32_t sx, int32_t sy);
void FT8_cmd_rotate(int32_t ang);
void FT8_cmd_getmatrix(int32_t a, int32_t b, int32_t c, int32_t d, int32_t e, int32_t f);


/* other commands: */
void FT8_cmd_calibrate(void);
void FT8_cmd_interrupt(uint32_t ms);
void FT8_cmd_setfont(uint32_t font, uint32_t ptr);
#ifdef FT8_81X_ENABLE
void FT8_cmd_romfont(uint32_t font, uint32_t romslot);
void FT8_cmd_setfont2(uint32_t font, uint32_t ptr, uint32_t firstchar);
void FT8_cmd_setrotate(uint32_t r);
void FT8_cmd_setscratch(uint32_t handle);
#endif
void FT8_cmd_sketch(int16_t x0, int16_t y0, uint16_t w0, uint16_t h0, uint32_t ptr, uint16_t format);
void FT8_cmd_snapshot(uint32_t ptr);
#ifdef FT8_81X_ENABLE
void FT8_cmd_snapshot2(uint32_t fmt, uint32_t ptr, int16_t x0, int16_t y0, int16_t w0, int16_t h0);
#endif
void FT8_cmd_spinner(int16_t x0, int16_t y0, uint16_t style, uint16_t scale);
void FT8_cmd_track(int16_t x0, int16_t y0, int16_t w0, int16_t h0, int16_t tag);


/* commands that return values by writing to the command-fifo */
uint16_t FT8_cmd_memcrc(uint32_t ptr, uint32_t num);
uint16_t FT8_cmd_getptr(void);
uint16_t FT8_cmd_regread(uint32_t ptr);
uint16_t FT8_cmd_getprops(uint32_t ptr);


/* meta-commands, sequences of several display-list entries condensed into simpler to use functions at the price of some overhead */
void FT8_cmd_point(int16_t x0, int16_t y0, uint16_t size);
void FT8_cmd_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t w0);
void FT8_cmd_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t corner);
///////////////
void FT8_cmd_dl(uint32_t command);

void FT8_get_cmdoffset(void);
uint16_t FT8_report_cmdoffset(void);
uint32_t FT8_get_touch_tag(void);
void FT8_cmd_start(void);
void FT8_cmd_execute(void);

void FT8_start_cmd_burst(void);
void FT8_end_cmd_burst(void);
///////
//void FT8_cmdWrite(uint8_t data);
void FT8_cmdWrite(uint8_t data)
{
	FT8_cs_set();
	spi_transmit(data);
	spi_transmit(0x00);
	spi_transmit(0x00);
	FT8_cs_clear();
}
void FT8_cmd_start(void)
{
	uint32_t ftAddress;

	ftAddress = REG_CMD_WRITE;

	FT8_cs_set();
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
	spi_transmit((uint8_t)(ftAddress));			/* send low address byte */
	spi_transmit((uint8_t)(cmdOffset));			/* send data low byte */
	spi_transmit((uint8_t)(cmdOffset >> 8));	/* send data high byte */
	FT8_cs_clear();
}
void FT8_cmd_execute(void)
{
	FT8_cmd_start();
	while (FT8_busy());
}
void FT8_get_cmdoffset(void)
{
	cmdOffset = FT8_memRead16(REG_CMD_WRITE);
}
void FT8_inc_cmdoffset(uint16_t increment)
{
	cmdOffset += increment;
	cmdOffset &= 0x0fff;
}
void FT8_start_cmd(uint32_t command)
{
	uint32_t ftAddress;
	
	if(cmd_burst == 0)
	{
		ftAddress = FT8_RAM_CMD + cmdOffset;
		FT8_cs_set();
		spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
		spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
		spi_transmit((uint8_t)(ftAddress));		/* send low address byte */
	}

	spi_transmit((uint8_t)(command));		/* send data low byte */
	spi_transmit((uint8_t)(command >> 8));
	spi_transmit((uint8_t)(command >> 16));
	spi_transmit((uint8_t)(command >> 24));		/* Send data high byte */
	FT8_inc_cmdoffset(4);			/* update the command-ram pointer */
}
/* generic function for all commands that have no arguments and all display-list specific control words */
/*
 examples:
 FT8_cmd_dl(CMD_DLSTART);
 FT8_cmd_dl(CMD_SWAP);
 FT8_cmd_dl(CMD_SCREENSAVER);
 FT8_cmd_dl(LINE_WIDTH(1*16));
 FT8_cmd_dl(VERTEX2F(0,0));
 FT8_cmd_dl(DL_BEGIN | FT8_RECTS);
*/
void FT8_cmd_dl(uint32_t command)
{
	FT8_start_cmd(command);
	if(cmd_burst == 0)
	{
		FT8_cs_clear();
	}
}
/* make current value of cmdOffset available while limiting access to that var to the FT8_commands module */
uint16_t FT8_report_cmdoffset(void)
{
	return (cmdOffset);
}